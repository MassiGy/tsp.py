# PHASE 1
Recuit simulé : on modifie une recherche locale. Au lieu de prendre le premier voisin
améliorant, on génère un voisin au hasard. Il devient la nouvelle solution s’il est
meilleur ou sinon selon une probabilité dépendant de la détérioration et d’une
« température » qui décroit au fil des itérations.

dans ce cas, c'est quoi la condition d'arrêt ? (car on connait pas la distance min à l'avance)
donc peut être c'est le fait que T atteint T_MIN ?


# PHASE 2
- save the downloaded graph data to a file and check if this file exist before each attempt at redownloading it. (done)
- same thing for the POIs data.(done)
- dump the POIs gemoetry.point coordinates into a list of points, then use that to construct an instance:Instance. (done)
- update the plot routines to have dynamic boundries not just 0-100 (done)
- call redhog on that instance. (done, algo redhog should be improved)
- init Hurestic(redhoged instance) (done)
- run the hurestics and keep track of the evolutions. (done)
- draw the point on the map (done)
- add a debug mode for the local instance files. (done)
- Update the logs. (done)
- write the report. (done)
- check if all the graphs are correct (maybe correct the evolution graphs, make them be in km and change valeur by distsum) (done)
- correct typos on the report. (done)
- refactor the code and submit the handout.



# improvements
- relax the redhog routine.